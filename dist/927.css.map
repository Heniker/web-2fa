{"version":3,"file":"927.css","mappings":";AA6OA;EACE,QAAQ;AACV;AAEA;EACE,kCAAkC;AACpC;;;AAIA;AACE;IACE,oBAAoB;AACtB;AAEA;IACE,oBAAoB;AACtB;AACF;AAEA;EACE,+CAA+C;EAC/C,kCAAkC;EAClC,gBAAgB;EAChB,WAAW;EACX,WAAW;EACX,oBAAoB;EACpB,qBAAqB;AACvB;AAEA;EACE,yBAAyB;EACzB,qBAAqB;;EAErB,+BAA+B;AACjC;AAEA;EACE,yBAAyB;AAC3B;AAEA;EACE,kBAAkB;EAClB,6BAA6B;EAC7B,+CAA+C;AACjD;;;ACnNA;EACE,gBAAgB;AAClB;;;AC+EA;EACE,eAAe;AACjB;;;AD9EA;EACE,WAAW;EACX,YAAY;EACZ,yCAAyC;AAC3C;;;AEQA;EACE,gEAAgE;AAClE;AAEA;EACE,YAAY;AACd;AAEA;EACE,yBAAyB;EACzB,qBAAqB;EACrB;;mCAEiC;AACnC;AAEA;EACE,qBAAqB;AACvB;;;ADmDA;EACE,UAAU;EACV,kBAAkB;EAClB,mBAAmB;EACnB,QAAQ;EACR,SAAS;EACT,6BAA6B;EAC7B;kCACgC;AAClC;AAEA;EACE,WAAW;EACX,YAAY;EACZ,yCAAyC;AAC3C;AAEA;EACE,eAAe;EACf,gBAAgB;AAClB;;;ACnEA;EACE,eAAe;EACf,gCAAgC;EAChC,WAAW;EACX,UAAU;AACZ","sources":["webpack:///./src/components/TwoFaCard.vue","webpack:///./src/routes/index/pass.vue","webpack:///./src/routes/index/new.vue","webpack:///./src/routes/index.vue"],"sourcesContent":["<template>\r\n  <v-card\r\n    :class=\"$style['cool-background']\"\r\n    height=\"170\"\r\n    color=\"#DCEFEF\"\r\n    variant=\"outlined\"\r\n    @click.right=\"(event) => isEdit || ((isEdit = true), event.preventDefault())\"\r\n  >\r\n    <div class=\"pa-2 d-flex justify-space-between h-100\">\r\n      <div class=\"flex-grow-1 mr-5\">\r\n        <template v-if=\"isEdit\">\r\n          <v-card-title class=\"mt-2 text-h1\">\r\n            <v-text-field\r\n              v-model=\"token.label\"\r\n              label=\"Name\"\r\n              variant=\"filled\"\r\n              density=\"default\"\r\n              hide-details\r\n            ></v-text-field>\r\n          </v-card-title>\r\n          <v-card-subtitle class=\"mt-auto mb-3\">\r\n            <v-text-field\r\n              v-model=\"token.description\"\r\n              label=\"Description\"\r\n              variant=\"solo\"\r\n              density=\"comfortable\"\r\n              hide-details\r\n            ></v-text-field>\r\n          </v-card-subtitle>\r\n        </template>\r\n\r\n        <template v-else>\r\n          <v-card-title>\r\n            <span class=\"text-h5\">{{ token.label || '&shy;' }}</span>\r\n          </v-card-title>\r\n          <v-card-subtitle>\r\n            <span>{{ token.description || '&shy;' }}</span>\r\n          </v-card-subtitle>\r\n          <v-card-text>\r\n            <Transition name=\"fade\">\r\n              <span :class=\"$style.code\" class=\"text-h2 my-auto text-h3\">\r\n                {{ displayCode || '&shy;' }}\r\n              </span>\r\n            </Transition>\r\n          </v-card-text>\r\n        </template>\r\n      </div>\r\n\r\n      <!-- <v-avatar color=\"#89CFF0\" size=\"90\" class=\"ma-auto mr-3 flex-shrink-0\"> -->\r\n      <v-avatar :color=\"color\" size=\"90\" class=\"my-auto mr-3 flex-shrink-0\">\r\n        <span class=\"text-h4 text-black\">{{ token.label.charAt(0).toUpperCase() }}</span>\r\n        <!-- <v-icon large color=\"blue darken-2\">\r\n            S\r\n          </v-icon> -->\r\n      </v-avatar>\r\n    </div>\r\n    <div\r\n      ref=\"progressBar\"\r\n      :style=\"{\r\n        transform: `scaleX(${transitionState})`,\r\n        transitionDuration: `${transitionDuration}ms`,\r\n        transformOrigin: transitionDirection ? 'left' : 'right',\r\n      }\"\r\n      class=\"bg-deep-purple-darken-3\"\r\n      :class=\"$style.progressbar\"\r\n    ></div>\r\n    <!-- <v-progress-linear\r\n      :class=\"$style.progressbar\"\r\n      :style=\"{ 'transition-duration': `${transitionSpeed}s` }\"\r\n      :max=\"token.period\"\r\n      :reverse=\"!!transitionDirection\"\r\n      :active=\"true\"\r\n      :model-value=\"transitionState\"\r\n      color=\"deep-purple\"\r\n      height=\"3\"\r\n    ></v-progress-linear> -->\r\n  </v-card>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport * as v from 'vue'\r\nimport * as otp from 'otpauth'\r\nimport { useDisplay } from 'vuetify'\r\nimport {\r\n  computedEager,\r\n  onClickOutside,\r\n  useTransition,\r\n  useCurrentElement,\r\n  whenever,\r\n  useAnimate,\r\n  type MaybeElement,\r\n  useDocumentVisibility,\r\n} from '@vueuse/core'\r\nimport { ProvideValue, seededRandom } from '../util'\r\nimport type { TokenI } from '@/_types'\r\nimport { Otp } from '@/services'\r\n\r\nexport default v.defineComponent({\r\n  components: {\r\n    ProvideValue,\r\n  },\r\n\r\n  props: {\r\n    token: { required: true, type: Object as v.PropType<TokenI> },\r\n  },\r\n\r\n  setup(props, { expose }) {\r\n    const otpService = v.inject(Otp.token) as Otp\r\n    assert(otpService)\r\n    const token = props.token\r\n\r\n    const displayCode = v.toRef(() => otpService.reactive.codes[token.id])\r\n\r\n    const isEdit = useEdit(v.ref(useCurrentElement()))\r\n    const color = getColorForString(props.token.label)\r\n\r\n    const progressBarEl = v.ref() as v.Ref<MaybeElement>\r\n\r\n    const { transitionDuration, transitionState, transitionDirection } = useTransitionValue(token)\r\n\r\n    return {\r\n      transitionDirection,\r\n      transitionDuration,\r\n      transitionState,\r\n      progressBar: progressBarEl,\r\n      isEdit,\r\n      color,\r\n      displayCode,\r\n    }\r\n  },\r\n})\r\n\r\nfunction useTransitionValue(token: TokenI) {\r\n  const otpService = v.inject(Otp.token)\r\n  assert(otpService)\r\n\r\n  const transitionDuration = v.ref(0)\r\n  const transitionDirection = v.ref(0 as 0 | 1)\r\n  const transitionState = v.ref(0)\r\n\r\n  const visibility = useDocumentVisibility()\r\n  whenever(\r\n    () => visibility.value === 'visible',\r\n    () => {\r\n      const time = otpService.getRemainingTime(token)\r\n      // transitionDirection.value = 0\r\n      transitionDuration.value = 0\r\n      transitionState.value = transitionDirection.value\r\n        ? (token.period - time / 1000) / token.period\r\n        : time / 1000 / token.period\r\n\r\n      // transitionDirection.value = 0\r\n\r\n      requestAnimationFrame(() => {\r\n        // const time = otpService.getRemainingTime(token)\r\n\r\n        // console.log(transitionState.value)\r\n        // console.log(time)\r\n        transitionDuration.value = time\r\n        transitionState.value = transitionDirection.value ? 1 : 0\r\n      })\r\n    },\r\n    { immediate: true }\r\n  )\r\n\r\n  // requestAnimationFrame(() => {\r\n  //   transitionState.value = 0\r\n  // })\r\n\r\n  v.watch(\r\n    v.toRef(() => otpService.reactive.codes[token.id]),\r\n    (current, previous) => {\r\n      if (!previous) {\r\n        return\r\n      }\r\n\r\n      transitionDuration.value = 0\r\n      transitionState.value = transitionDirection.value ? 1 : 0\r\n      transitionDirection.value = Number(!transitionDirection.value)\r\n\r\n      requestAnimationFrame(() => {\r\n        const time = otpService.getRemainingTime(token)\r\n        // console.log('timeRemaining2')\r\n        // console.log(time)\r\n\r\n        transitionDuration.value = time\r\n        transitionState.value = transitionDirection.value ? 1 : 0\r\n      })\r\n    }\r\n  )\r\n\r\n  return { transitionState, transitionDuration, transitionDirection }\r\n}\r\n\r\nfunction useEdit(rootRef: v.Ref<Element>) {\r\n  const isEdit = v.ref(false)\r\n\r\n  let cancel: (() => void) | undefined\r\n  v.watch(isEdit, () => {\r\n    if (isEdit.value === true) {\r\n      cancel = onClickOutside(rootRef as any, () => {\r\n        isEdit.value = false\r\n      })\r\n    } else {\r\n      cancel?.()\r\n    }\r\n  })\r\n\r\n  return isEdit\r\n}\r\n\r\nfunction getColorForString(str: string) {\r\n  // gpt3 said these colors are nice\r\n  const colors = [\r\n    '#FFFFFF',\r\n    '#ECECEC',\r\n    '#C4E3F3',\r\n    '#B5E6B5',\r\n    '#D8B4E2',\r\n    '#FFFACD',\r\n    '#FFC0CB',\r\n    '#FFDAB9',\r\n    '#B2DFDB',\r\n    '#FFC1C1',\r\n  ]\r\n\r\n  const stringSum = (\r\n    [].map.call(str, (it: string, i) => it.charCodeAt(0) * (i + 1)) as number[]\r\n  ).reduce((a, b) => a + b, 0)\r\n\r\n  const indexNum = ~~(seededRandom(stringSum) * 10)\r\n\r\n  return colors[indexNum]\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n:deep(.v-label.v-field-label.v-field-label--floating) {\r\n  top: 3px;\r\n}\r\n\r\n:deep(.v-progress-linear:not(\\0)) {\r\n  transition-timing-function: linear;\r\n}\r\n</style>\r\n\r\n<style module>\r\n@keyframes progress {\r\n  from {\r\n    transform: scaleX(0);\r\n  }\r\n\r\n  to {\r\n    transform: scaleX(1);\r\n  }\r\n}\r\n\r\n.progressbar {\r\n  /* animation: 3s 0 alternate linear progress; */\r\n  transition-timing-function: linear;\r\n  margin-top: -3px;\r\n  height: 3px;\r\n  width: 100%;\r\n  /* z-index: -1000; */\r\n  /* contain: strict; */\r\n}\r\n\r\n.cool-background {\r\n  background-color: #292929;\r\n  border-color: #3b3b3b;\r\n\r\n  /* background-color: #5A7172; */\r\n}\r\n\r\n.cool-background:hover {\r\n  background-color: #363636;\r\n}\r\n\r\n.code {\r\n  /* padding: 5px; */\r\n  /* border: 1px solid white; */\r\n  /* border-color: rgb(var(--v-theme-surface)); */\r\n}\r\n</style>\r\n","<template>\r\n  <Teleport to=\"#app-overlay-portal\">\r\n    <section class=\"d-flex justify-center align-center\" :class=\"$style.overlay\">\r\n      <v-card :width=\"display.smAndDown.value ? '90%' : 400\">\r\n        <v-card-title class=\"d-flex justify-center mt-3 mb-1 text-h4\">\r\n          Provide password\r\n        </v-card-title>\r\n\r\n        <v-card-text>\r\n          <!-- <v-form> -->\r\n          <ProvideValue v-slot=\"slot\" :isPassVisible=\"false\">\r\n            <v-text-field\r\n              v-model=\"password\"\r\n              class=\"mt-3\"\r\n              autofocus\r\n              density=\"default\"\r\n              :append-inner-icon=\"slot.isPassVisible ? 'mdi-eye' : 'mdi-eye-off'\"\r\n              :rules=\"[(v) => !!v || 'Password is required']\"\r\n              :type=\"slot.isPassVisible ? 'text' : 'password'\"\r\n              label=\"Decryption password\"\r\n              @click:append-inner=\"slot.isPassVisible = !slot.isPassVisible\"\r\n              @keyup.enter=\"onPasswordAccept\"\r\n            ></v-text-field>\r\n          </ProvideValue>\r\n          <!-- </v-form> -->\r\n        </v-card-text>\r\n\r\n        <v-card-actions class=\"mb-4 mt-n3 d-flex justify-space-around\">\r\n          <v-btn\r\n            class=\"px-10\"\r\n            color=\"deep-purple-accent-1\"\r\n            variant=\"tonal\"\r\n            @click=\"onPasswordAccept\"\r\n          >\r\n            Confirm\r\n          </v-btn>\r\n        </v-card-actions>\r\n      </v-card>\r\n    </section>\r\n  </Teleport>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport type { TokenI } from '@/_types'\r\nimport * as v from 'vue'\r\nimport { useDisplay } from 'vuetify'\r\nimport { Otp, Security } from '@/services'\r\nimport { ProvideValue } from '@/util'\r\nimport { useRouter } from 'vue-router'\r\n\r\nexport default v.defineComponent({\r\n  components: { ProvideValue },\r\n  setup(props, ctx) {\r\n    const otpService = v.inject(Otp.token)\r\n    assert(otpService)\r\n    const securityService = v.inject(Security.token)\r\n    assert(securityService)\r\n    const router = useRouter()\r\n    const password = v.ref('')\r\n\r\n    const onPasswordAccept = () => {\r\n      securityService.setupSecureContext(password.value)\r\n      router.push({ name: '' + require.resolve('@/routes/index.vue') })\r\n    }\r\n\r\n    return { display: useDisplay(), password, onPasswordAccept }\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n:deep(.v-input__details) {\r\n  margin-bottom: 0;\r\n}\r\n</style>\r\n<style module>\r\n.overlay {\r\n  width: 100%;\r\n  height: 100%;\r\n  backdrop-filter: grayscale(0.5) blur(2px);\r\n}\r\n</style>\r\n","<template>\r\n  <Teleport to=\"#app-overlay-portal\">\r\n    <div :class=\"$style.scrim\"></div>\r\n    <section :class=\"$style['overlay']\">\r\n      <v-card :width=\"display.smAndDown.value ? '90vw' : 400\">\r\n        <v-card-title class=\"d-flex justify-center mt-3 mb-1 text-h4\">Add 2FA</v-card-title>\r\n\r\n        <v-card-text class=\"pb-2\">\r\n          <v-form>\r\n            <v-text-field\r\n              v-model=\"token.label\"\r\n              aria-autocomplete=\"none\"\r\n              class=\"mt-3\"\r\n              label=\"Name\"\r\n              hide-details\r\n            ></v-text-field>\r\n            <v-text-field\r\n              v-model=\"token.description\"\r\n              aria-autocomplete=\"none\"\r\n              class=\"mt-3\"\r\n              label=\"Description\"\r\n              hide-details\r\n            ></v-text-field>\r\n            <v-text-field\r\n              v-model=\"tokenSecret\"\r\n              aria-autocomplete=\"none\"\r\n              label=\"Token\"\r\n              hide-details\r\n              class=\"mt-3\"\r\n              :rules=\"[(v) => !!v || 'Token is required']\"\r\n            ></v-text-field>\r\n          </v-form>\r\n        </v-card-text>\r\n\r\n        <v-card-actions class=\"mx-2 mb-2 d-flex justify-space-between\">\r\n          <v-btn\r\n            class=\"px-4\"\r\n            tag=\"a\"\r\n            color=\"red\"\r\n            variant=\"tonal\"\r\n            :to=\"{ name: '' + require.resolve('@/routes/index.vue') }\"\r\n          >\r\n            Cancel\r\n          </v-btn>\r\n          <!-- <v-btn\r\n            @click=\"isSettingsExpanded = !isSettingsExpanded\"\r\n            :class=\"[$style['expand-btn'], isSettingsExpanded && $style['expand-btn--active']]\"\r\n            class=\"mb-n2\"\r\n            color=\"grey-darken-1\"\r\n            variant=\"outlined\"\r\n            icon=\"mdi-chevron-double-down\"\r\n          ></v-btn> -->\r\n          <v-btn\r\n            @click=\"isSettingsExpanded = !isSettingsExpanded\"\r\n            :class=\"[$style['expand-btn']]\"\r\n            class=\"mb-n4\"\r\n            size=\"small\"\r\n            color=\"grey-darken-1\"\r\n            :variant=\"isSettingsExpanded ? 'outlined' : 'text'\"\r\n          >\r\n            advanced\r\n          </v-btn>\r\n          <v-btn\r\n            class=\"px-4\"\r\n            tag=\"a\"\r\n            color=\"green\"\r\n            variant=\"tonal\"\r\n            @click=\"saveToken\"\r\n            :to=\"{ name: '' + require.resolve('@/routes/index.vue') }\"\r\n          >\r\n            Create\r\n          </v-btn>\r\n        </v-card-actions>\r\n\r\n        <v-expand-transition>\r\n          <v-sheet v-show=\"isSettingsExpanded\">\r\n            <v-row no-gutters class=\"pb-4 pt-2 px-4\">\r\n              <v-col class=\"mr-4\">\r\n                <v-select\r\n                  v-model=\"token.algorithm\"\r\n                  :items=\"otpService.supportedAlgorithms\"\r\n                  label=\"Algorithm\"\r\n                  variant=\"solo-filled\"\r\n                  hide-details\r\n                ></v-select>\r\n              </v-col>\r\n              <v-col class=\"mr-4\">\r\n                <v-text-field\r\n                  label=\"Time step\"\r\n                  v-model.number=\"token.period\"\r\n                  hide-details\r\n                  type=\"number\"\r\n                />\r\n              </v-col>\r\n              <v-col>\r\n                <v-text-field\r\n                  label=\"Code size\"\r\n                  v-model.number=\"token.codeLen\"\r\n                  hide-details\r\n                  type=\"number\"\r\n                />\r\n              </v-col>\r\n            </v-row>\r\n          </v-sheet>\r\n        </v-expand-transition>\r\n      </v-card>\r\n    </section>\r\n  </Teleport>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport type { TokenI, TokenAlgorithmT } from '@/_types'\r\nimport * as v from 'vue'\r\nimport { useDisplay } from 'vuetify'\r\nimport { Otp } from '@/services'\r\nimport { nanoid } from 'nanoid'\r\n\r\nexport default v.defineComponent({\r\n  components: {},\r\n  setup(props, ctx) {\r\n    const otpService = v.inject(Otp.token)\r\n    assert(otpService)\r\n\r\n    const token: v.Ref<TokenI> = v.ref({\r\n      id: nanoid(),\r\n      label: '',\r\n      description: '',\r\n      period: 30,\r\n      algorithm: 'SHA1',\r\n      codeLen: 6,\r\n      code: '',\r\n    })\r\n\r\n    const tokenSecret = v.ref('')\r\n\r\n    const saveToken = () => {\r\n      otpService.addToken(token.value, tokenSecret.value)\r\n    }\r\n\r\n    return {\r\n      display: useDisplay(),\r\n      token,\r\n      tokenSecret,\r\n      saveToken,\r\n      otpService,\r\n      isSettingsExpanded: v.ref(false),\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.test {\r\n  flex-basis: 0px;\r\n}\r\n</style>\r\n<style module>\r\n.overlay {\r\n  z-index: 1;\r\n  position: absolute;\r\n  /* display: flex; */\r\n  top: 30%;\r\n  left: 50%;\r\n  transform: translate(-50%, 0);\r\n  /* align-items: center;\r\n  justify-content: space-around; */\r\n}\r\n\r\n.scrim {\r\n  width: 100%;\r\n  height: 100%;\r\n  backdrop-filter: grayscale(0.5) blur(2px);\r\n}\r\n\r\n.expand-btn i {\r\n  margin-top: 3px;\r\n  font-size: 1.7em;\r\n}\r\n</style>\r\n","<template>\r\n  <Teleport to=\"#app-bar-portal\">\r\n    <v-app-bar>\r\n      <v-container fluid class=\"d-flex\">\r\n        <Teleport to=\"#app-overlay-portal\" :disabled=\"!display.smAndDown\">\r\n          <v-btn\r\n            v-if=\"isContextSetUp\"\r\n            :class=\"[display.smAndDown ? $style['add-new-mobile'] : '']\"\r\n            :size=\"display.smAndDown ? 'x-large' : undefined\"\r\n            @click=\"addToken\"\r\n            aria-label=\"Create new token\"\r\n            color=\"deep-purple-darken-1\"\r\n            variant=\"elevated\"\r\n            elevation=\"4\"\r\n            icon=\"mdi-plus\"\r\n            class=\"ml-auto\"\r\n          ></v-btn>\r\n        </Teleport>\r\n      </v-container>\r\n    </v-app-bar>\r\n  </Teleport>\r\n  <v-container fluid>\r\n    <v-row>\r\n      <v-col cols=\"12\" md=\"6\" lg=\"4\" xl=\"3\" v-for=\"token in tokens\">\r\n        <TwoFaCard :token=\"token\"></TwoFaCard>\r\n      </v-col>\r\n    </v-row>\r\n  </v-container>\r\n  <router-view></router-view>\r\n</template>\r\n\r\n<script lang=\"ts\">\r\nimport * as v from 'vue'\r\nimport * as otp from 'otpauth'\r\nimport { useDisplay } from 'vuetify'\r\nimport * as vuetifyComponents from 'vuetify/components'\r\nimport { onClickOutside } from '@vueuse/core'\r\nimport TwoFaCard from '@/components/TwoFaCard.vue'\r\nimport { Otp, Security } from '@/services'\r\nimport { isResolved } from '@/util'\r\nimport { useRouter, onBeforeRouteUpdate } from 'vue-router'\r\n\r\nconst addBtnComponent = v.h(vuetifyComponents.VBtn, {})\r\n\r\nexport default v.defineComponent({\r\n  components: {\r\n    TwoFaCard,\r\n  },\r\n\r\n  setup() {\r\n    const otpService = v.inject(Otp.token)\r\n    assert(otpService)\r\n    const securityService = v.inject(Security.token)\r\n    assert(securityService)\r\n\r\n    const router = useRouter()\r\n\r\n    otpService.fetchStoredTokens()\r\n\r\n    v.onBeforeMount(async () => {\r\n      const isSecuritySetUp = securityService.reactive.isContextSetUp\r\n      if (!isSecuritySetUp) {\r\n        router.push({ name: '' + require.resolve('./index/pass') })\r\n      }\r\n    })\r\n\r\n    const addToken = () => {\r\n      if (securityService.reactive.isContextSetUp) {\r\n        router.push({ name: '' + require.resolve('./index/new') })\r\n      }\r\n    }\r\n\r\n    const isAdding = v.ref(true)\r\n    const tokens = v.computed(() => otpService.reactive.tokens)\r\n    const isContextSetUp = v.computed(() => securityService.reactive.isContextSetUp)\r\n\r\n    return {\r\n      tokens,\r\n      isContextSetUp,\r\n      testt: 'Hello world',\r\n      isAdding,\r\n      addToken,\r\n    }\r\n  },\r\n})\r\n</script>\r\n\r\n<style scoped>\r\n.test {\r\n  /* box-shadow: 0px 0px 4px 0px rgb(var(--v-theme-background)); */\r\n}\r\n\r\n.test2 {\r\n  height: 70px;\r\n}\r\n\r\n:deep(.v-field) * {\r\n  /* letter-spacing: 1px; */\r\n  /* font-size: 30px; */\r\n  /* --v-input-padding-top: 2px;\r\n  --v-field-padding-start: 12px;\r\n  --v-input-control-height: 60px; */\r\n}\r\n\r\n:deep(.v-label) {\r\n  /* font-size: 17px; */\r\n}\r\n</style>\r\n\r\n<style module>\r\n.add-new-mobile {\r\n  position: fixed;\r\n  transform: translate(-20%, -20%);\r\n  bottom: 0px;\r\n  right: 0px;\r\n}\r\n</style>\r\n"],"names":[],"sourceRoot":""}